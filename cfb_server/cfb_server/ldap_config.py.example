# This file is an example how to implement LDAP login
import django_auth_ldap.config as config
import ldap

# Read here how to configure this file: https://django-auth-ldap.readthedocs.io/en/latest/
# Here is just an example
AUTH_LDAP_SERVER_URI = "ldap://dc01.example.com:3268"

# Bind user which is used to find user's DN using login name ( "%(user)s" token )
AUTH_LDAP_BIND_DN = "cn=bindusr,cn=Users,dc=example,dc=com"
AUTH_LDAP_BIND_PASSWORD = "bindUsrLdapPassw0rd"

# AUTH_LDAP_USER_SEARCH: How user DN should be detemined - specify search base,
AUTH_LDAP_USER_SEARCH = config.LDAPSearch("cn=Users,dc=example,dc=com",
                                          ldap.SCOPE_SUBTREE, "(cn=%(user)s)")

# Additional example how to search for users in several places
# AUTH_LDAP_USER_SEARCH = config.LDAPSearchUnion(
#     LDAPSearch("ou=users,dc=example,dc=com", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"),
#     LDAPSearch("ou=otherusers,dc=example,dc=com", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"),
# )

# AUTH_LDAP_FIND_GROUP_PERMS: map groups to Django groups
# if a user is member of group "cn=Employees,cn=Users,dc=example,dc=com" in LDAP, he will be treated as a member
# of group "Employees" in Django (even though he will not be visible in the group from django-admin perspective)
AUTH_LDAP_FIND_GROUP_PERMS = True

# AUTH_LDAP_GROUP_SEARCH: LDAP search to find all available groups
AUTH_LDAP_GROUP_SEARCH = config.LDAPSearch(
    "dc=example,dc=com", ldap.SCOPE_SUBTREE, "(objectClass=group)"
)

# AUTH_LDAP_USER_ATTR_MAP
# map LDAP attributes to Django user attributes
AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName",
                           "last_name": "sn",
                           "email": "mail"}

# use AUTH_LDAP_GROUP_TYPE = GroupOfNamesType() for simple group membership
# use AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType("cn") for nested (groups of groups) using Active Directory
AUTH_LDAP_GROUP_TYPE = config.NestedGroupOfNamesType("cn")

# AUTH_LDAP_USER_FLAGS_BY_GROUP
# user flags is_staff and is_superuser can be set if user is a member of specified group
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_staff": "CN=Employees Group,CN=Users,dc=example,dc=com",
    "is_superuser": "CN=Domain Admins,CN=Users,dc=example,dc=com",
}

# AUTH_LDAP_CACHE_TIMEOUT - cache the result of search for user's groups and attributes
AUTH_LDAP_CACHE_TIMEOUT = 600

# AUTH_LDAP_DEBUG - enable DEBUG level messages for LDAP. This helps a lot if you struggle to connect to LDAP
AUTH_LDAP_DEBUG = False
